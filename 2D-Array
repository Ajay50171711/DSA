üìö 2D Arrays in C
------------------------------

‚úÖ What is a 2D Array?
A 2D array is an array of arrays ‚Äî basically, a table of rows and columns.

Example:  
int a[2][3];  // A 2-row, 3-column 2D array

This creates:
Row 0: a[0][0], a[0][1], a[0][2]
Row 1: a[1][0], a[1][1], a[1][2]

üõ†Ô∏è Compile-Time Initialization
C allows you to initialize 2D arrays in multiple valid ways:

‚úÖ Valid Declarations:
int a[2][3] = {1, 2, 3, 4, 5, 6};            // Row-wise flattened
int a[2][3] = {{1, 2, 3}, {4, 5, 6}};        // Explicit row grouping
int a[][3]  = {{1, 3, 7}, {9, 6, 0},
               {4, 8, 2}, {7, 1, 9}};        // Compiler infers rows


‚ùå Invalid Declaration:
int a[2][] = {{1, 2}, {3, 4}};  // ‚ùå Error: columns must be specified
Reason: In 2D arrays, column size is essential for the compiler to compute memory offsets using pointer arithmetic.

‚åõ Run-Time Initialization
We can use loops and scanf() to populate a 2D array during program execution.

Example:
#include <stdio.h>

int main() {
    int a[2][3];
    int i, j;
    
    printf("Enter the elements of the array:\n");

    for(i = 0; i < 2; i++) {
        for(j = 0; j < 3; j++) {
            scanf("%d", &a[i][j]);
        }
    }

    printf("You entered:\n");
    for(i = 0; i < 2; i++) {
        for(j = 0; j < 3; j++) {
            printf("%d ", a[i][j]);
        }
        printf("\n");
    }

    return 0;
}


üß† Memory Storage in 2D Arrays
---------------------------------

üü© Row-Major Order (C Language Default)
Elements are stored row by row in a linear memory block.

For int a[2][3] = {{1,2,3},{4,5,6}};, memory layout is:

Index:     0  1  2  3  4  5
Value:     1  2  3  4  5  6
            ‚Üërow0    ‚Üërow1

‚úÖ Row-Major Memory Representation

+----------+----------+----------+----------+----------+----------+
| a[0][0]=1| a[0][1]=2| a[0][2]=3| a[1][0]=4| a[1][1]=5| a[1][2]=6|
|  1000    |  1004    |  1008    |  1012    |  1016    |  1020    |
+----------+----------+----------+----------+----------+----------+


Formula (Row-Major):
To access a[i][j] in memory:
address = base_address + ((i * total_columns) + j) * sizeof(datatype)


üü¶ Column-Major Order (Used in Fortran, MATLAB)
Elements are stored column by column.

For the same array a[2][3], memory layout would be:

Original 2D Array:
+----+----+----+
| 1  | 2  | 3  |   ‚Üê Row 0
+----+----+----+
| 4  | 5  | 6  |   ‚Üê Row 1
+----+----+----+

Column-Major Order in Memory:
Index:     0    1    2    3    4    5
Value:     1    4    2    5    3    6
            ‚Üëcol0     ‚Üëcol1     ‚Üëcol2

üü¶ Column-Major Memory Representation 

+----------+----------+----------+----------+----------+----------+
| a[0][0]=1| a[1][0]=4| a[0][1]=2| a[1][1]=5| a[0][2]=3| a[1][2]=6|
|  1000    |  1004    |  1008    |  1012    |  1016    |  1020    |
+----------+----------+----------+----------+----------+----------+

Formula (Column-Major):
-----------------------
To access a[i][j] in memory:

address = base_address + ((j * total_rows) + i) * sizeof(datatype)
‚ö†Ô∏è Note: C does not support column-major layout by default, but understanding it helps when working with external libraries like MATLAB or OpenCV.



2D Array With Pointer
----------------------

üß† Understanding Pointers and 2D Arrays in C

#include <stdio.h>

int main() {
    int a[3][3] = {6, 2, 5, 0, 1, 3, 4, 9, 8};  // 3x3 matrix
    int *p;
    p = &a[0][0];  //

    // Pointer and array address checks
    printf("%p\n", p);
    printf("%p\n", a);
    printf("%p\n", &a[0][0]);
    printf("%p\n", &a);
    printf("%p\n", a[0]);
    printf("%p\n", *a);
    printf("%p\n", 0[a]);

    // Addressing rows
    printf("%p\n", *(a + 1));
    printf("%p\n", a[1]);
    printf("%p\n", &a[1][0]);

    // Accessing values
    printf("%p\n", *(a + 1) + 2);
    printf("%d\n", *(*(a + 1) + 2));  // a[1][2]
    printf("%d\n", a[1][2]);

    printf("%d\n", a[2][0]);
    printf("%d\n", *(*(a + 2) + 0));
    printf("%d\n", *(a[2] + 0));

    // Base address value
    printf("%d\n", **a);

    // Address of element a[1][1]
    printf("%p\n", a[1] + 1);

    return 0;
}

============================================================

*(p + 0)  = a[0][0] = 6
*(p + 1)  = a[0][1] = 2
*(p + 2)  = a[0][2] = 5
*(p + 3)  = a[1][0] = 0
*(p + 4)  = a[1][1] = 1
*(p + 5)  = a[1][2] = 3
*(p + 6)  = a[2][0] = 4
*(p + 7)  = a[2][1] = 9
*(p + 8)  = a[2][2] = 8







