Compile-Time Array Declaration
=======================================

#include <stdio.h>

int main() {
    int arr[5] = {10, 20, 30, 40, 50};  // Size and values known at compile time

    printf("Element at index 2: %d\n", arr[2]);

    return 0;
}




Run-Time Array Declaration (using Variable Length Arrays)
==========================================================

#include <stdio.h>

int main() {
    int n;
    printf("Enter the size of the array: ");
    scanf("%d", &n);

    int arr[n];  // Variable Length Array (VLA) - size known at run-time

    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("Array elements are:\n");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    return 0;
}



 Insert Value at a Specific Position in an Array (For Sorted Array)
==============================================================================
#include <stdio.h>

int main() {
    int arr[100], n, pos, value;

    // Step 1: Read size and elements
    printf("Enter number of elements (max 100): ");
    scanf("%d", &n);

    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Step 2: Read position and value to insert
    printf("Enter position to insert (0 to %d): ", n);
    scanf("%d", &pos);
    
    if (pos < 0 || pos > n) {
        printf("Invalid position!\n");
        return 1;
    }

    printf("Enter value to insert: ");
    scanf("%d", &value);

    // Step 3: Shift elements to the right
    for (int i = n; i > pos; i--) {
        arr[i] = arr[i - 1];
    }

    // Step 4: Insert the new value
    arr[pos] = value;
    n++;  // Increase array size

    // Step 5: Print updated array
    printf("Array after insertion:\n");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    return 0;
}



Insert at Specific Position and Move Removed Element to End(For Unsorted Array)
======================================================================
#include <stdio.h>

int main() {
    int arr[100], n, pos, value,i;

    // Step 1: Read size and elements
    printf("Enter number of elements (max 100): ");
    scanf("%d", &n);

    printf("Enter %d elements:\n", n);
    for(i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Step 2: Read position and value to insert
    printf("Enter position to insert (0 to %d): ", n);
    scanf("%d", &pos);
    
    if (pos < 0 || pos > n) {
        printf("Invalid position!\n");
        return 1;
    }

    printf("Enter value to insert: ");
    scanf("%d", &value);

    // Step 3: Shift elements to last index
   arr[n]=arr[pos];

    // Step 4: Insert the new value
    arr[pos] = value;
    n++;  // Increase array size

    // Step 5: Print updated array
    printf("Array after insertion:\n");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    return 0;
}


Delete from Specific Position(For sorted Array)
=========================================================
#include <stdio.h>

int main() {
    int arr[100], n, pos;

    // Step 1: Input array size and elements
    printf("Enter the number of elements (max 100): ");
    scanf("%d", &n);

    if (n <= 0 || n > 100) {
        printf("Invalid array size!\n");
        return 1;
    }

    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Step 2: Input position to delete
    printf("Enter the position to delete (0 to %d): ", n - 1);
    scanf("%d", &pos);

    if (pos < 0 || pos >= n) {
        printf("Invalid position!\n");
        return 1;
    }

    // Step 3: Shift elements to the left to remove the element
    for (int i = pos; i < n - 1; i++) {
        arr[i] = arr[i + 1];
    }

    // Step 4: Reduce size
    n--;

    // Step 5: Print the updated array
    printf("Array after deletion:\n");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    return 0;
}



Delete from Specific Position(For Unsorted Array)
=========================================================
#include <stdio.h>

int main() {
    int arr[100] = {45, 12, 89, 33, 67};  // Unsorted array
    int n = 5;  // Current size
    int pos;

    // Step 1: Print original array
    printf("Original unsorted array:\n");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    // Step 2: Get position to delete
    printf("\n\nEnter position to delete (0 to %d): ", n - 1);
    scanf("%d", &pos);

    // Step 3: Validate position
    if (pos < 0 || pos >= n) {
        printf("Invalid position!\n");
        return 1;
    }

    // Step 4: Move last element to the position and reduce size
    arr[pos] = arr[n - 1];
    n--;  // Reduce array size

    // Step 5: Print updated array
    printf("Array after deletion (last element moved to position %d):\n", pos);
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    return 0;
}

===============================================================================================================

Q) W.A.P to create a function which delete the element from the array & it take a parameter as value not index

soln:
    #include <stdio.h>

int main() {
    int arr[100], n, value, pos = -1;

    // Step 1: Input size and elements
    printf("Enter number of elements: ");
    scanf("%d", &n);

    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Step 2: Input value to delete
    printf("Enter value to delete: ");
    scanf("%d", &value);

    // Step 3: Search for the value
    for (int i = 0; i < n; i++) {
        if (arr[i] == value) {
            pos = i;
            break;
        }
    }

    // Step 4: Delete if found
    if (pos == -1) {
        printf("Value %d not found in the array.\n", value);
    } else {
        for (int i = pos; i < n - 1; i++) {
            arr[i] = arr[i + 1];  // Shift left
        }
        n--;  // Reduce array size
        printf("Value %d deleted from position %d.\n", value, pos);
    }

    // Step 5: Display updated array
    printf("Array after deletion:\n");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    return 0;
}

=================================================================================================================

1D Array With Pointer
---------------------

Array name itself a pointer to the base address of the array

int a[] = {6,2,1,5,3}

suppose base adress of array is 100 so....
100->6
104->2
108->1
112->5
116->3

in this case if we  
printf("%p",a);   o/p = 100
int *q;
q=a;
printf("p",q);  o/p 100
q++
printf("%p",q);                     in this case it print the base addres of array which is the value of p
printf("%d",*q);                    in this case it print the value at base addres of array which is 6
printf("%p",&q);                    in this case it print the addres of the q where it store the address of base address



a=&a  true
q=&q  false
































