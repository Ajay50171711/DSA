1. üìñ Introduction
A Linked List is a linear data structure where each element (node) points to the next. It does not store data in contiguous memory like arrays.

| Feature            | Array                | Linked List            |
| ------------------ | -------------------- | ---------------------- |
| Size               | Fixed                | Dynamic                |
| Memory Allocation  | At once (contiguous) | One-by-one (scattered) |
| Insertion/Deletion | Hard in middle       | Easy                   |
| Random Access      | Yes (fast)           | No (go step by step)   |


3. üîÅ Types of Linked Lists
----------------------------
Singly Linked List

Doubly Linked List

Circular Linked List 

Doubly Circular Linked List
--------------------------------------
In C, there is no built-in data type that can store both data and a memory address (pointer) together in one unit.

But in a linked list, each element (called a node) must store:

1)Data (like an integer, float, etc.)

2)Address of the next node (i.e., a pointer)

So, to combine these two things (data + pointer), we use a user-defined data type using struct.
------------------------------------------------------------------------------------------------------------------------------

4. üß± Node Structure (in C)
struct Node {
    int data;
    struct Node *next;
};


W.A.P to implement linked list
#include <stdio.h>
#include <stdlib.h>

int main() {

    // Define the node structure
    struct node {
        int data;
        struct node *next;
    };

    // Declare pointers and variables
    struct node *head = NULL, *newnode, *temp;
    int choice = 1, count = 0;

    // Creating the linked list
    while (choice) {
        newnode = (struct node*)malloc(sizeof(struct node));

        // Check for memory allocation failure
        if (newnode == NULL) {
            printf("Memory allocation failed.\n");
            return 1;
        }

        printf("Enter the element for the list:\n");
        scanf("%d", &newnode->data);
        newnode->next = NULL;

        if (head == NULL) {
            head = temp = newnode;  // first node
        } else {
            temp->next = newnode;   // link last node
            temp = newnode;         // update last node
        }

        count++;

        printf("Do you want to insert more elements to the list? (1 for Yes / 0 for No): ");
        scanf("%d", &choice);
    }

    // Displaying the list
    printf("\nElements of the linked list are:\n");
    temp = head;
    while (temp != NULL) {
        printf("%d\n", temp->data);
        temp = temp->next;
    }

    printf("Number of elements in linked list is: %d\n", count);

    return 0;
}


insert at beginning
-----------------------
#include <stdio.h>
#include <stdlib.h>

int main() {
    struct node {
        int data;
        struct node *next;
    };

    struct node *head = NULL, *newnode, *temp;
    int choice = 1, count = 0, newnumber;

    // Creating initial list
    while (choice) {
        newnode = (struct node*)malloc(sizeof(struct node));
        if (newnode == NULL) {
            printf("Memory allocation failed.\n");
            return 1;
        }

        printf("Enter the element for the list:\n");
        scanf("%d", &newnode->data);
        newnode->next = NULL;

        if (head == NULL) {
            head = temp = newnode;
        } else {
            temp->next = newnode;
            temp = newnode;
        }

        count++;

        printf("Do you want to insert more elements to the list? Press (1 for Yes / 0 for No): ");
        scanf("%d", &choice);
    }

    // Inserting at the beginning
    printf("\nWe are going to insert an element at the beginning.\n");
    printf("Enter an element to insert:\n");
    scanf("%d", &newnumber);

    newnode = (struct node*)malloc(sizeof(struct node));
    if (newnode == NULL) {
        printf("Memory allocation failed.\n");
        return 1;
    }

    newnode->data = newnumber;
    newnode->next = head;
    head = newnode;
    count++;

    // Displaying list
    printf("\nElements of the linked list are:\n");
    temp = head;
    while (temp != NULL) {
        printf("%d\n", temp->data);
        temp = temp->next;
    }

    printf("Total number of elements in the linked list is: %d\n", count);

    return 0;
}


innsert at ending position
--------------------------
#include <stdio.h>
#include <stdlib.h>

int main() {
    struct node {
        int data;
        struct node *next;
    };

    struct node *head = NULL, *newnode, *temp;
    int choice = 1, count = 0, newnumber;

    // Create the initial linked list
    while (choice) {
        newnode = (struct node*)malloc(sizeof(struct node));
        if (newnode == NULL) {
            printf("Memory allocation failed.\n");
            return 1;
        }

        printf("Enter the element for the list:\n");
        scanf("%d", &newnode->data);
        newnode->next = NULL;

        if (head == NULL) {
            head = temp = newnode;
        } else {
            temp->next = newnode;
            temp = newnode;
        }

        count++;

        printf("Do you want to insert more elements to the list? Press (1 for Yes / 0 for No): ");
        scanf("%d", &choice);
    }

    // Insert at the end
    printf("\nWe are going to insert an element at the end.\n");
    printf("Enter an element to insert:\n");
    scanf("%d", &newnumber);

    newnode = (struct node*)malloc(sizeof(struct node));
    if (newnode == NULL) {
        printf("Memory allocation failed.\n");
        return 1;
    }
    newnode->data = newnumber;
    newnode->next = NULL;

    temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newnode;
    count++;

    // Display the list
    printf("\nElements of the linked list are:\n");
    temp = head;
    while (temp != NULL) {
        printf("%d\n", temp->data);
        temp = temp->next;
    }

    printf("Total number of elements in the linked list: %d\n", count);

    return 0;
}



insert at specific position
--------------------------------

#include<stdio.h>
#include<stdlib.h>
int main(){
	struct node{
		int data;
		struct node *next;
	};
	
	
	struct node *head=NULL,*temp,*newnode;
	int choice=1,count=0;
	
	while(choice){
	newnode = (struct node*)malloc(sizeof(struct node));
	printf("eneter the data for node");
	scanf("%d",&newnode->data);
	newnode->next = NULL;
	
	if(head==NULL){
		head = temp = newnode;
	}
	else{
		temp->next=newnode;
		temp=newnode;
	}
	
	printf("enter the chice 1/0");
	scanf("%d",&choice);
	
}


		printf("element of the list are \n");
		
		temp = head;
		while(temp!=NULL){
			printf("%d\n",temp->data);
			temp=temp->next;
		}
		
		int pos;
		
		printf("enter the position to iunsert newnode");
		scanf("%d",&pos);
		
		
		newnode = (struct node*)malloc(sizeof(struct node));
		
		
		printf("enter the data");
		scanf("%d",&newnode->data);
		newnode->next=NULL;
		
		
		
		int i = 1;
		temp = head;
		while(i<pos-1){
			temp=temp->next;
		}
		
		
		newnode->next = temp->next;
		temp->next = newnode;
		
			printf("element of the list are \n");
		
		temp = head;
		while(temp!=NULL){
			printf("%d\n",temp->data);
			temp=temp->next;
		}
		
		
	
	return 0;
}

delete from begining
-----------------------------

#include<stdio.h>
#include<stdlib.h>

int main(){
	struct node{
		int data;
		struct node *next;
	};
	
	int choice = 1;
	
	struct node *newnode,*head,*temp;
	
	head = NULL;
	
	while(choice){
	
	newnode=(struct node*)malloc(sizeof(struct node));
	
	printf("enter the data for newnode");
	scanf("%d",&newnode->data);
	newnode->next = NULL;
	
	if(head == NULL){
		head = temp = newnode;
	}
	
	else{
		temp->next = newnode;
		temp = newnode;
	}
	
	printf("enter your choice 1/0");
	
	scanf("%d",&choice);
	
	
}

temp = head;
while(temp!=NULL){
	printf("%d\n",temp->data);
	temp=temp->next;
}

printf("now we are going to delete the first element\n");

struct node *deleted;
deleted = head;
head = head->next;
free(deleted);

printf("after deleted\n");
temp = head;
while(temp!=NULL){
	printf("%d\n",temp->data);
	temp=temp->next;
}	
	return 0;
}


delete from the end
----------------------
#include<stdio.h>
#include<stdlib.h>

int main(){
	struct node{
		int data;
		struct node *next;
	};
	
	int choice = 1;
	
	struct node *newnode,*head,*temp;
	
	head = NULL;
	
	while(choice){
	
	newnode=(struct node*)malloc(sizeof(struct node));
	
	printf("enter the data for newnode");
	scanf("%d",&newnode->data);
	newnode->next = NULL;
	
	if(head == NULL){
		head = temp = newnode;
	}
	
	else{
		temp->next = newnode;
		temp = newnode;
	}
	
	printf("enter your choice 1/0");
	
	scanf("%d",&choice);
	
	
}

temp = head;
while(temp!=NULL){
	printf("%d\n",temp->data);
	temp=temp->next;
}



printf("now we are going to delete from the end\n");

temp = head;
while(temp->next->next!=NULL){
	temp = temp->next;
}
free(temp->next);
temp->next = NULL;

temp = head;
while(temp!=NULL){
	printf("%d\n",temp->data);
	temp=temp->next;
}
	
	return 0;
}

delete from specific position
---------------------------------

#include<stdio.h>
#include<stdlib.h>

int main(){
	struct node{
		int data;
		struct node *next;
	};
	
	int choice = 1;
	
	struct node *newnode,*head,*temp;
	
	head = NULL;
	
	while(choice){
	
	newnode=(struct node*)malloc(sizeof(struct node));
	
	printf("enter the data for newnode");
	scanf("%d",&newnode->data);
	newnode->next = NULL;
	
	if(head == NULL){
		head = temp = newnode;
	}
	
	else{
		temp->next = newnode;
		temp = newnode;
	}
	
	printf("enter your choice 1/0");
	
	scanf("%d",&choice);
	
	
}

temp = head;
while(temp!=NULL){
	printf("%d\n",temp->data);
	temp=temp->next;
}



printf("now we are going to delete from the specific position\n");
int pos,i = 1;
printf("enter the position");
scanf("%d",&pos);
temp = head;
while(i<pos-1){
	temp=temp->next;
	i++;
}

struct node *todelete;

todelete = temp->next;
temp->next = temp->next->next;

free(todelete);


temp = head;
while(temp!=NULL){
	printf("%d\n",temp->data);
	temp=temp->next;
}
	
	return 0;
}





