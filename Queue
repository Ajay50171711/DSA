ðŸ“Œ Queue Implementation using Array


#include <stdio.h>
#include <stdlib.h>
#define MAX 5   // Maximum size of the queue

int queue[MAX];
int front = -1, rear = -1;

// Function to check if queue is full
int isFull() {
    return (rear == MAX - 1);
}

// Function to check if queue is empty
int isEmpty() {
    return (front == -1 || front > rear);
}

// Function to insert an element (Enqueue)
void enqueue(int value) {
    if (isFull()) {
        printf("Queue Overflow! Cannot insert %d\n", value);
    } else {
        if (front == -1) front = 0;  // First element
        rear++;
        queue[rear] = value;
        printf("%d enqueued to queue\n", value);
    }
}

// Function to remove an element (Dequeue)
void dequeue() {
    if (isEmpty()) {
        printf("Queue Underflow! Cannot dequeue\n");
    } else {
        printf("%d dequeued from queue\n", queue[front]);
        front++;
    }
}

// Function to get the front element
void peek() {
    if (isEmpty()) {
        printf("Queue is empty\n");
    } else {
        printf("Front element is %d\n", queue[front]);
    }
}

// Function to display the queue
void display() {
    if (isEmpty()) {
        printf("Queue is empty\n");
    } else {
        printf("Queue elements: ");
        for (int i = front; i <= rear; i++) {
            printf("%d ", queue[i]);
        }
        printf("\n");
    }
}

int main() {
    enqueue(10);
    enqueue(20);
    enqueue(30);
    display();

    dequeue();
    display();

    peek();

    enqueue(40);
    enqueue(50);
    enqueue(60); // This should show overflow
    display();

    return 0;
}


=====================================================================

ðŸ“Œ Queue with Linked List

#include<stdio.h>
#include<stdlib.h>
struct node{
	int data;
	struct node *next;
};

struct node *front = NULL;
struct node *rear = NULL;

void enqueue(int value){
	
	struct node *newnode;
	newnode = (struct node*)malloc(sizeof(struct node));
	newnode->data = value;
	newnode->next = NULL;
if(front ==NULL && rear==NULL){
	front = rear = newnode;

}	
else{
	rear->next = newnode;
	rear = newnode;
}
}

void display(){
	struct node *temp;
	temp = front;
	while(temp!=NULL){
		printf("%d\n",temp->data);
		temp=temp->next;
	}
}

void dequeue(){
	struct node *temp;
	temp = front;
	printf("%d dequeue from the queue\n",front->data);
	front=front->next;
	free(temp);
}

int main(){
	enqueue(12);
	enqueue(56);
	enqueue(23);
	display();
	dequeue();
	display();
	return 0;
}

==================================================================================================
circular queue
---------------

//circular queue implementatiomn using array

#include<stdio.h>
#include<stdlib.h>
#define n 5

int queue[n];
int front =-1;
int rear =-1;


void enqueue(int value){
	if(front == -1 && rear==-1){
		front = rear = 0;
		queue[rear]=value;
	}
	else if((rear+1)%n==front){
		printf("queue is full");
	}
	else{
		rear = (rear+1)%n;
		queue[rear]=value;
	}
}

void dequeue(){
	if(front==-1 && rear == -1){
		printf("their is no element to remove from the queue");
	}
	else if(front==rear){
		front = rear= -1;
	}
	else{
		printf("%d is dequeue\n",queue[front]);
		front = (front+1)%n;
	}
}

void display(){
	int i =  front;
	if(front==-1 && rear==-1){
		printf("queue empty");
	}
	else{
		printf("queue is \n");
		while(i!=rear){
			printf("%d\n",queue[i]);
			i = (i+1)%n;
		}
		printf("%d\n",queue[rear]);
	}
}
int main(){
	enqueue(12);
	enqueue(52);
	enqueue(19);
	enqueue(86);
	display();
	dequeue();	
	dequeue();
	display();

	
	return 0;
}
===========================================================================

