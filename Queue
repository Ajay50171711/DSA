ðŸ“Œ Queue Implementation using Array


#include <stdio.h>
#include <stdlib.h>
#define MAX 5   // Maximum size of the queue

int queue[MAX];
int front = -1, rear = -1;

// Function to check if queue is full
int isFull() {
    return (rear == MAX - 1);
}

// Function to check if queue is empty
int isEmpty() {
    return (front == -1 || front > rear);
}

// Function to insert an element (Enqueue)
void enqueue(int value) {
    if (isFull()) {
        printf("Queue Overflow! Cannot insert %d\n", value);
    } else {
        if (front == -1) front = 0;  // First element
        rear++;
        queue[rear] = value;
        printf("%d enqueued to queue\n", value);
    }
}

// Function to remove an element (Dequeue)
void dequeue() {
    if (isEmpty()) {
        printf("Queue Underflow! Cannot dequeue\n");
    } else {
        printf("%d dequeued from queue\n", queue[front]);
        front++;
    }
}

// Function to get the front element
void peek() {
    if (isEmpty()) {
        printf("Queue is empty\n");
    } else {
        printf("Front element is %d\n", queue[front]);
    }
}

// Function to display the queue
void display() {
    if (isEmpty()) {
        printf("Queue is empty\n");
    } else {
        printf("Queue elements: ");
        for (int i = front; i <= rear; i++) {
            printf("%d ", queue[i]);
        }
        printf("\n");
    }
}

int main() {
    enqueue(10);
    enqueue(20);
    enqueue(30);
    display();

    dequeue();
    display();

    peek();

    enqueue(40);
    enqueue(50);
    enqueue(60); // This should show overflow
    display();

    return 0;
}


=====================================================================

ðŸ“Œ Queue with Linked List

#include <stdio.h>
#include <stdlib.h>

// Node structure
struct Node {
    int data;
    struct Node* next;
};

// Queue structure with front and rear
struct Queue {
    struct Node* front;
    struct Node* rear;
};

// Function to create a new node
struct Node* newNode(int value) {
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
    temp->data = value;
    temp->next = NULL;
    return temp;
}

// Function to create an empty queue
struct Queue* createQueue() {
    struct Queue* q = (struct Queue*)malloc(sizeof(struct Queue));
    q->front = q->rear = NULL;
    return q;
}

// Enqueue: Add element at the rear
void enqueue(struct Queue* q, int value) {
    struct Node* temp = newNode(value);

    if (q->rear == NULL) {  // Empty queue
        q->front = q->rear = temp;
        printf("%d enqueued\n", value);
        return;
    }

    q->rear->next = temp;
    q->rear = temp;
    printf("%d enqueued\n", value);
}

// Dequeue: Remove element from the front
void dequeue(struct Queue* q) {
    if (q->front == NULL) {
        printf("Queue Underflow! Cannot dequeue\n");
        return;
    }

    struct Node* temp = q->front;
    printf("%d dequeued\n", temp->data);
    q->front = q->front->next;

    // If queue becomes empty
    if (q->front == NULL)
        q->rear = NULL;

    free(temp);
}

// Peek: Get the front element
void peek(struct Queue* q) {
    if (q->front == NULL)
        printf("Queue is empty\n");
    else
        printf("Front element is %d\n", q->front->data);
}

// Display: Print all elements
void display(struct Queue* q) {
    if (q->front == NULL) {
        printf("Queue is empty\n");
        return;
    }

    struct Node* temp = q->front;
    printf("Queue elements: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

// Main function to test
int main() {
    struct Queue* q = createQueue();

    enqueue(q, 10);
    enqueue(q, 20);
    enqueue(q, 30);
    display(q);

    dequeue(q);
    display(q);

    peek(q);

    enqueue(q, 40);
    enqueue(q, 50);
    display(q);

    dequeue(q);
    dequeue(q);
    dequeue(q);
    dequeue(q); // Queue empty now

    peek(q);
    display(q);

    return 0;
}
