ðŸ“Œ Queue Implementation using Array


#include <stdio.h>
#include <stdlib.h>
#define MAX 5   // Maximum size of the queue

int queue[MAX];
int front = -1, rear = -1;

// Function to check if queue is full
int isFull() {
    return (rear == MAX - 1);
}

// Function to check if queue is empty
int isEmpty() {
    return (front == -1 || front > rear);
}

// Function to insert an element (Enqueue)
void enqueue(int value) {
    if (isFull()) {
        printf("Queue Overflow! Cannot insert %d\n", value);
    } else {
        if (front == -1) front = 0;  // First element
        rear++;
        queue[rear] = value;
        printf("%d enqueued to queue\n", value);
    }
}

// Function to remove an element (Dequeue)
void dequeue() {
    if (isEmpty()) {
        printf("Queue Underflow! Cannot dequeue\n");
    } else {
        printf("%d dequeued from queue\n", queue[front]);
        front++;
    }
}

// Function to get the front element
void peek() {
    if (isEmpty()) {
        printf("Queue is empty\n");
    } else {
        printf("Front element is %d\n", queue[front]);
    }
}

// Function to display the queue
void display() {
    if (isEmpty()) {
        printf("Queue is empty\n");
    } else {
        printf("Queue elements: ");
        for (int i = front; i <= rear; i++) {
            printf("%d ", queue[i]);
        }
        printf("\n");
    }
}

int main() {
    enqueue(10);
    enqueue(20);
    enqueue(30);
    display();

    dequeue();
    display();

    peek();

    enqueue(40);
    enqueue(50);
    enqueue(60); // This should show overflow
    display();

    return 0;
}


=====================================================================

ðŸ“Œ Queue with Linked List

#include<stdio.h>
#include<stdlib.h>
struct node{
	int data;
	struct node *next;
};

struct node *front = NULL;
struct node *rear = NULL;

void enqueue(int value){
	
	struct node *newnode;
	newnode = (struct node*)malloc(sizeof(struct node));
	newnode->data = value;
	newnode->next = NULL;
if(front ==NULL && rear==NULL){
	front = rear = newnode;

}	
else{
	rear->next = newnode;
	rear = newnode;
}
}

void display(){
	struct node *temp;
	temp = front;
	while(temp!=NULL){
		printf("%d\n",temp->data);
		temp=temp->next;
	}
}

void dequeue(){
	struct node *temp;
	temp = front;
	printf("%d dequeue from the queue\n",front->data);
	front=front->next;
	free(temp);
}

int main(){
	enqueue(12);
	enqueue(56);
	enqueue(23);
	display();
	dequeue();
	display();
	return 0;
}

==================================================================================================
circular queue
---------------
#include <stdio.h>
#include <stdlib.h>

// Node structure
struct Node {
    int data;
    struct Node* next;
};

struct Node* front = NULL;
struct Node* rear = NULL;

// Enqueue operation
void enqueue(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (!newNode) {
        printf("Memory allocation failed\n");
        return;
    }
    newNode->data = value;
    newNode->next = NULL;

    if (front == NULL) {  // First element
        front = rear = newNode;
        rear->next = front; // circular link
    } else {
        rear->next = newNode;
        rear = newNode;
        rear->next = front; // maintain circular link
    }
    printf("%d enqueued to queue\n", value);
}

// Dequeue operation
void dequeue() {
    if (front == NULL) {
        printf("Queue is empty\n");
        return;
    }

    if (front == rear) {  // Only one element
        printf("%d dequeued from queue\n", front->data);
        free(front);
        front = rear = NULL;
    } else {
        struct Node* temp = front;
        printf("%d dequeued from queue\n", front->data);
        front = front->next;
        rear->next = front; // maintain circular link
        free(temp);
    }
}

// Display queue elements
void display() {
    if (front == NULL) {
        printf("Queue is empty\n");
        return;
    }
    struct Node* temp = front;
    printf("Queue elements: ");
    do {
        printf("%d ", temp->data);
        temp = temp->next;
    } while (temp != front);
    printf("\n");
}

// Peek at the front element
void peek() {
    if (front == NULL) {
        printf("Queue is empty\n");
    } else {
        printf("Front element is: %d\n", front->data);
    }
}

int main() {
    enqueue(10);
    enqueue(20);
    enqueue(30);
    display();

    dequeue();
    display();

    enqueue(40);
    enqueue(50);
    display();

    peek();

    return 0;
}



==================================================================================================
Double Ended queue
---------------

#include <stdio.h>
#include <stdlib.h>

// Node structure
struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
};

struct Node* front = NULL;
struct Node* rear = NULL;

// Insert at rear
void enqueueRear(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;

    if (front == NULL) { // First node
        front = rear = newNode;
        front->next = front->prev = front; // circular
    } else {
        newNode->prev = rear;
        newNode->next = front;
        rear->next = newNode;
        front->prev = newNode;
        rear = newNode;
    }
    printf("%d inserted at rear\n", value);
}

// Insert at front
void enqueueFront(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;

    if (front == NULL) { // First node
        front = rear = newNode;
        front->next = front->prev = front;
    } else {
        newNode->next = front;
        newNode->prev = rear;
        rear->next = newNode;
        front->prev = newNode;
        front = newNode;
    }
    printf("%d inserted at front\n", value);
}

// Delete from front
void dequeueFront() {
    if (front == NULL) {
        printf("Deque is empty\n");
        return;
    }
    if (front == rear) { // Only one element
        printf("%d deleted from front\n", front->data);
        free(front);
        front = rear = NULL;
    } else {
        struct Node* temp = front;
        printf("%d deleted from front\n", front->data);
        front = front->next;
        rear->next = front;
        front->prev = rear;
        free(temp);
    }
}

// Delete from rear
void dequeueRear() {
    if (rear == NULL) {
        printf("Deque is empty\n");
        return;
    }
    if (front == rear) { // Only one element
        printf("%d deleted from rear\n", rear->data);
        free(rear);
        front = rear = NULL;
    } else {
        struct Node* temp = rear;
        printf("%d deleted from rear\n", rear->data);
        rear = rear->prev;
        rear->next = front;
        front->prev = rear;
        free(temp);
    }
}

// Display elements
void display() {
    if (front == NULL) {
        printf("Deque is empty\n");
        return;
    }
    struct Node* temp = front;
    printf("Deque elements: ");
    do {
        printf("%d ", temp->data);
        temp = temp->next;
    } while (temp != front);
    printf("\n");
}

int main() {
    enqueueRear(10);
    enqueueRear(20);
    enqueueFront(5);
    display();

    dequeueFront();
    display();

    enqueueRear(30);
    enqueueFront(2);
    display();

    dequeueRear();
    display();

    return 0;
}
